global run;
global to_number;
global to_string;
global to_boolean;
global dump_value;


global functions;

function lookup_func(func) {
	let i = 0;

	while (i < length(functions)) {
		if (functions[i][0] == func) {
			return functions[i][1];
		}

		set i = i + 1;
	}

	return null;
}

function fn_random(_args) {
	return random() % 65536;
}

function fn_prompt(_args) {
	return prompt();
}

function fn_eval(args) {
	return run(parse(to_string(args[0])));
}

function fn_block(args) {
	return args[0];
}

function fn_call(args) {
	return run(run(args[0]));
}

global abort;
function fn_system(args) {
	do abort("todo: system");
}

function fn_quit(args) {
	do exit(to_number(args[0]));
}

function fn_not(args) {
	return !to_boolean(args[0]);
}

function fn_length(args) {
	return length(to_string(args[0]));
}

function fn_dump(args){
	let value = run(args[0]);

	do dump_value(value);

	return value;
}

function fn_output(args) {
	let str = to_string(args[0]);

	if (str[length(str) - 1] == '\\') {
		do print(substr(str, 0, length(str) - 2));
	} else {
		do print(str + "\n");
	}
}

function fn_ascii(args) {
	do abort("todo: ascii");
}

function fn_add(args) {
	let lhs = run(args[0]);

	if (kindof(lhs) == 'string') {
		return lhs + to_string(args[1]);
	} else {
		return lhs + to_number(args[1]);
	}
}

function fn_sub(args) {
	return to_number(args[0]) - to_number(args[1]);
}

function fn_mul(args) {
	return run(args[0]) * to_number(args[1]);
}

function fn_div(args) {
	let lhs = to_number(args[1]);
	let rhs = to_number(args[1]);

	if (rhs == 0) {
		do abort("cannot divide by zero");
	}

	return lhs / rhs;
}

function fn_mod(args) {
	let lhs = to_number(args[1]);
	let rhs = to_number(args[1]);

	if (rhs == 0) {
		do abort("cannot modulo by zero");
	}

	return lhs % rhs;
}

function fn_pow(args) {
	do abort("todo: manual pow lol");
}

function fn_eql(args) {
	let lhs = run(args[0]);
	let rhs = run(args[1]);

	return lhs == rhs;
}

function fn_lth(args) {
	let lhs = run(args[0]);
	let kind = kindof(lhs);

	if (kind == 'integer') {
		return lhs < to_number(args[1]);
	} else if (kind == 'string') {
		return lhs < to_string(args[1]);
	} else {
		do assert(kind == 'boolean', 'bad kind given to lth');

		return !lhs & to_boolean(args[1]);
	}
}

function fn_gth(args) {
	let lhs = run(args[0]);
	let kind = kindof(lhs);

	if (kind == 'integer') {
		return lhs > to_number(args[1]);
	} else if (kind == 'string') {
		return lhs > to_string(args[1]);
	} else {
		do assert(kind == 'boolean', 'bad kind given to gth');

		return lhs & !to_boolean(args[1]);
	}
}

function fn_and(args) {
	let lhs = run(args[0]);

	if (to_boolean(lhs)) {
		return run(args[1]);
	} else {
		return lhs;
	}
}

function fn_or(args) {
	let lhs = run(args[0]);

	if (to_boolean(lhs)) {
		return lhs;
	} else {
		return run(args[1]);
	}
}

function fn_then(args) {
	do run(args[0]);
	return run(args[1]);
}

function fn_assign(args) {
	do assert(args[0][0] == 'variable', "assigning to non-variable");

	let rhs = run(args[1]);
	set args[0][1] = rhs;

	return rhs;
}

function fn_while(args){
	while (to_boolean(args[0])) {
		do run(args[1]);
	}
}

function fn_if(args) {
	if (to_boolean(args[0])) {
		return run(args[1]);
	} else {
		return run(args[2]);
	}
}

function fn_get(args) {
	return substr(to_string(args[0]), to_number(args[1]), to_number(args[2]));
}

function fn_set(args) {
	let str = to_string(args[0]);
	let start = to_number(args[1]);
	let len = to_number(args[2]);
	let repl = to_string(args[3]);

	return substr(str, 0, start) + repl + substr(str, start + len, length(str));
}

global functions;
function init_functions() {
	set functions = [];
	do insert(functions, length(functions), ['R', [0, fn_random]]);
	do insert(functions, length(functions), ['P', [0, fn_prompt]]);
	do insert(functions, length(functions), ['E', [1, fn_eval]]);
	do insert(functions, length(functions), ['B', [1, fn_block]]);
	do insert(functions, length(functions), ['C', [1, fn_call]]);
	do insert(functions, length(functions), ['`', [1, fn_system]]);
	do insert(functions, length(functions), ['Q', [1, fn_quit]]);
	do insert(functions, length(functions), ['!', [1, fn_not]]);
	do insert(functions, length(functions), ['L', [1, fn_length]]);
	do insert(functions, length(functions), ['D', [1, fn_dump]]);
	do insert(functions, length(functions), ['O', [1, fn_output]]);
	do insert(functions, length(functions), ['A', [1, fn_ascii]]);
	do insert(functions, length(functions), ['+', [2, fn_add]]);
	do insert(functions, length(functions), ['-', [2, fn_sub]]);
	do insert(functions, length(functions), ['*', [2, fn_mul]]);
	do insert(functions, length(functions), ['/', [2, fn_div]]);
	do insert(functions, length(functions), ['%', [2, fn_mod]]);
	do insert(functions, length(functions), ['^', [2, fn_pow]]);
	do insert(functions, length(functions), ['?', [2, fn_eql]]);
	do insert(functions, length(functions), ['<', [2, fn_lth]]);
	do insert(functions, length(functions), ['>', [2, fn_gth]]);
	do insert(functions, length(functions), ['&', [2, fn_and]]);
	do insert(functions, length(functions), ['|', [2, fn_or]]);
	do insert(functions, length(functions), [';', [2, fn_then]]);
	do insert(functions, length(functions), ['=', [2, fn_assign]]);
	do insert(functions, length(functions), ['W', [2, fn_while]]);
	do insert(functions, length(functions), ['I', [3, fn_if]]);
	do insert(functions, length(functions), ['G', [3, fn_get]]);
	do insert(functions, length(functions), ['S', [4, fn_set]]);
}
